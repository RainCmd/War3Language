//===========================================================================
// 
// 	兽族AI脚本
// 
// Warcraft III AI script
// Generated by 小y
// Date : 2022年7月6日16 : 02 : 26
// 
//===========================================================================

//***************************************************************************
//*
//* Global Variables
//*
//***************************************************************************

globals
    integer array   hero_ids
    integer         hero_count = 0
    integer array   hero_skill_ids
    
    integer         unit_worker =   'uaco'  //工人
    integer         unit_wood_worker =   'ugho'  //木工
    integer         buildid_base_1 =   'unpl'  //一本
    integer         buildid_base_2 =   'unp1'  //二本
    integer         buildid_base_3 =   'unp2'  //三本
    integer         buildid_barrack =   'usep'  //兵营
    integer         buildid_altar =   'uaod'  //祭坛
    integer         buildid_food =   'uzig'  //人口
    integer         buildid_store =   'utom'  //商店
    
    integer         lack_gold_workers //缺少的矿工
    integer         lack_wood_workers //缺少的木工
    integer         redundancy_gold_workers //多余的矿工
    integer         redundancy_wood_workers //多余的木工
    boolean         prepare_workers = false //工人已就绪，多余工人可以拉到战场了
    
    integer array   units //单位
    integer array   unit_require_builds //需求
    integer array   unit_require_build_count //
    integer array   unit_require_upgrades //
    integer array   unit_require_upgrades_level //
    integer array   unit_require_upgrade_count //
    integer array   unit_dependencys //等价物
    integer array   unit_dependency_count //
    integer         unit_count = 0 //
    
    integer array   builds //建筑
    integer array   build_require_builds //需求
    integer array   build_require_build_count //
    integer array   build_require_upgrades //
    integer array   build_require_upgrades_level //
    integer array   build_require_upgrade_count //
    integer array   build_dependencys //等价物
    integer array   build_dependency_count //
    integer         build_count = 0 //
    
    integer array   upgrades //科技
    integer array   upgrades_level //
    integer array   upgrade_require_builds //需求
    integer array   upgrade_require_build_count //
    integer array   upgrade_require_upgrades //
    integer array   upgrade_require_upgrades_level //
    integer array   upgrade_require_upgrade_count //
    integer         upgrade_count = 0 //

    integer array   soldiers //兵种
    integer array   soldier_weight //兵种数量比重
    integer         soldier_count = 0
endglobals

//region 工具函数
function ITOS takes integer i returns string
    local string array s 
    local string r = ""
    set s[0] = "0"
    set s[1] = "1"
    set s[2] = "2"
    set s[3] = "3"
    set s[4] = "4"
    set s[5] = "5"
    set s[6] = "6"
    set s[7] = "7"
    set s[8] = "8"
    set s[9] = "9"
    loop
    exitwhen i == 0
        set r = s[i - i / 10 * 10] + r
        set i = i / 10
    endloop
    return r
endfunction

function TotalFoodProduced takes nothing returns integer
    return GetPlayerState(ai_player, PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

function ExpansionNeeded takes nothing returns boolean
    return take_exp
endfunction

function BuildExpansion takes integer hallID, integer mineID returns nothing
    if(HallsCompleted(hallID)) then
        call SetBuildExpa(TownCount(hallID) + 1, mineID)
    endif
endfunction

function ResetAttackUnits takes nothing returns nothing
    call InitAssaultGroup(  )
endfunction
//endregion

//region 攻击
//最少攻击部队
function HaveMinimumAttackers takes nothing returns boolean
    local integer index = 0
    local integer count = 0
    if GetUnitCountDone(hero_id) + GetUnitCountDone(hero_id2) + GetUnitCountDone(hero_id3) == 0 then
        return false
    endif
    loop
    exitwhen index >= soldier_count
        set count = count + GetUnitCountDone(soldiers[index])
        set index = index + 1
    endloop
    return count > 2
endfunction

function PrepareAttackGroup takes nothing returns nothing
    local integer all
    local integer index = 0
	
    set all = GetUnitCountDone(hero_id)
    call SetAssaultGroup(all, all, hero_id)
    set all = GetUnitCountDone(hero_id2)
    call SetAssaultGroup(all, all, hero_id2)
    set all = GetUnitCountDone(hero_id3)
    call SetAssaultGroup(all, all, hero_id3)
    
    loop
    exitwhen index >= soldier_count
        set all = GetUnitCountDone(soldiers[index])
        call SetAssaultGroup(all, all, soldiers[index])
        set index = index + 1
    endloop
    if prepare_workers then
        if redundancy_gold_workers > 0 then
            call SetAssaultGroup(redundancy_gold_workers, redundancy_gold_workers, unit_worker)
        endif
        if redundancy_wood_workers > 0 then
            call SetAssaultGroup(redundancy_wood_workers, redundancy_wood_workers, unit_worker)
        endif
    endif
endfunction
//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if target == null then
        return
    endif
    if addAlliance then
        call SetAllianceTarget(target)
    endif
    call FormGroup(3, true)
    call AttackMoveKillA(target)
    if not addAlliance then
        call SetAllianceTarget(null)
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function GetCreepCampTarget takes unit target, integer level, boolean flyers_ok returns unit
    if target == null then
        set target = GetCreepCamp(0, level, flyers_ok)
    endif
    return target
endfunction

function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true

    // 城镇被攻击时不出战
    if(TownThreatened()) then
        call Sleep(2)
        return
    endif

    // 友军的进攻目标
    if(target == null) then
        set target = GetAllianceTarget()
        if(target != null) then
            set setAlly = false
        endif
    endif

    // 扩张目标
    if(target == null) then
        set target = GetExpansionFoe()
        if(target != null) then
            set take_exp = false
        endif
    endif

    // 敌人分矿
    if(target == null) then
        set target = GetEnemyExpansion()
    endif

    // 敌人主基地
    if(target == null) then
        set target = GetMegaTarget()
    endif

    // 任意基地
    if(target == null) then
        call StartGetEnemyBase(  )
        loop
            exitwhen(not WaitGetEnemyBase())
            call SuicideSleep(1)
        endloop
        set target = GetEnemyBase()
    endif

    // 怪物
    set target = GetCreepCampTarget(target, 3, false)
    set target = GetCreepCampTarget(target, 6, false)
    set target = GetCreepCampTarget(target, 100, false)

    if(target != null) then
        call AttackTarget(target, setAlly)
    endif
    call Sleep(20)
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================
function AttackAssignment takes nothing returns nothing
    call StaggerSleep(0, 2)
    call Sleep(45)
    loop
        loop
        exitwhen HaveMinimumAttackers() and not CaptainRetreating()
            call Sleep(2)
        endloop
        call RemoveInjuries(  )
        call ResetAttackUnits(  )
        call PrepareAttackGroup(  )
        call LaunchAttack(  )
    endloop
endfunction
//endregion

//region Building and Harvesting
function TakeWorker takes integer count returns integer
    if count <= redundancy_gold_workers then
        set redundancy_gold_workers = redundancy_gold_workers - count
    else
        set lack_gold_workers = lack_gold_workers + count - redundancy_gold_workers
        set count = redundancy_gold_workers
        set redundancy_gold_workers = 0
    endif
    return count
endfunction
function TakeWoodWorker takes integer count returns integer
    if count <= redundancy_wood_workers then
        set redundancy_wood_workers = redundancy_wood_workers - count
    else
        set redundancy_wood_workers = redundancy_wood_workers + count - redundancy_wood_workers
        set count = redundancy_wood_workers
        set redundancy_wood_workers = 0
    endif
    return count
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
//===========================================================================

//region 工具函数
function HarvestPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    local integer mineCount = GetMinesOwned()
    loop
    exitwhen mineCount == 0
    set mineCount = mineCount - 1
   	 	call HarvestGold(mine + mineCount, TakeWorker(5))
   	 	call HarvestWood(mine + mineCount, TakeWoodWorker(3))
    endloop
    call HarvestWood(0, TakeWoodWorker(4))
endfunction

function GetUnitRequireIndex takes integer id returns integer
    local integer index = 0
    loop
    exitwhen index >= unit_count
    if units[index] == id then
        return index
    endif
    set index = index + 1
    endloop
    return - 1
endfunction
function GetBuildRequireIndex takes integer id returns integer
    local integer index = 0
    loop
    exitwhen index >= build_count
    if builds[index] == id then
        return index
    endif
    set index = index + 1
    endloop
    return - 1
endfunction
function GetUpgradeRequireIndex takes integer id returns integer
    local integer index = 0
    loop
    exitwhen index >= upgrade_count
    if upgrades[index] == id then
        return index
    endif
    set index = index + 1
    endloop
    return - 1
endfunction

function CheckBuildDoneWithDependency takes integer id returns boolean
    local integer require
    local integer index = 0
    if GetUnitCountDone(id) > 0 then
        return true
    endif
    set require = GetBuildRequireIndex(id)
    loop
    exitwhen index >= build_dependency_count[require]
        if GetUnitCountDone(build_dependencys[require * 10 + index]) > 0 then
            return true
        endif
    set index = index + 1
    endloop
    return false
endfunction
function UnitRequire takes integer index returns boolean
    local integer count = unit_require_build_count[index]
    loop
    exitwhen count == 0
    set count = count - 1
    if not CheckBuildDoneWithDependency(unit_require_builds[index * 10 + count]) then
        return false
    endif
    endloop
    set count = unit_require_upgrade_count[index]
    loop
    exitwhen count == 0
    set count = count - 1
    if GetUpgradeLevel(unit_require_upgrades[index * 10 + count]) < unit_require_upgrades_level[index * 10 + count] then
        return false
    endif
    endloop
    return true
endfunction
function BuildRequire takes integer index returns boolean
    local integer count = build_require_build_count[index]
    loop
    exitwhen count == 0
    set count = count - 1
    if not CheckBuildDoneWithDependency(build_require_builds[index * 10 + count]) then
        return false
    endif
    endloop
    set count = build_require_upgrade_count[index]
    loop
    exitwhen count == 0
    set count = count - 1
    if GetUpgradeLevel(build_require_upgrades[index * 10 + count]) < build_require_upgrades_level[index * 10 + count] then
        return false
    endif
    endloop
    return true
endfunction
function UpgradeRequire takes integer index returns boolean
    local integer count = upgrade_require_build_count[index]
    loop
    exitwhen count == 0
    set count = count - 1
    if not CheckBuildDoneWithDependency(upgrade_require_builds[index * 10 + count]) then
        return false
    endif
    endloop
    set count = upgrade_require_upgrade_count[index]
    loop
    exitwhen count == 0
    set count = count - 1
    if GetUpgradeLevel(upgrade_require_upgrades[index * 10 + count]) < upgrade_require_upgrades_level[index * 10 + count] then
        return false
    endif
    endloop
    return true
endfunction

function UnitCostRequire takes integer id returns boolean
    return GetUnitGoldCost(id) <= GetGold() and GetUnitWoodCost(id) <= GetWood() and TotalFoodProduced() - FoodUsed() >= GetFoodUsed(id)
endfunction
function UpgradeCostRequire takes integer id returns boolean
    return GetUpgradeGoldCost(id) <= GetGold() and GetUpgradeWoodCost(id) <= GetWood()
endfunction

function Upgrade takes nothing returns nothing
    local integer index = 0
    local integer upgrade
    loop
    exitwhen index >= upgrade_count
    set upgrade = upgrades[index]
    if GetUpgradeLevel(upgrade) >= upgrades_level[index] or(UpgradeCostRequire(upgrade) and UpgradeRequire(upgrade)) then
        call SetBuildAll(BUILD_UPGRADE, upgrades_level[index], upgrade, - 1)
    endif
    set index = index + 1
    endloop
endfunction

function BuildUnits takes integer id, integer count returns nothing
    local integer index = 0
    if count > 0 and UnitCostRequire(id) and UnitRequire(GetUnitRequireIndex(id)) then
        loop
        exitwhen index >= count
        set index = index + 1
            call SetBuildAll(BUILD_UNIT, index, id, - 1)
        endloop
    endif
endfunction

function BuildBuilds takes integer id, integer count returns nothing
    local integer index = 0
    if count > 0 and UnitCostRequire(id) and BuildRequire(GetBuildRequireIndex(id)) then
        loop
        exitwhen index >= count
        set index = index + 1
            call SetBuildAll(BUILD_UNIT, index, id, - 1)
        endloop
    endif
endfunction
//endregion

function BuildSoldiers takes integer total_food returns nothing
    local integer index = 0
    local integer weight = 0
    //local string s = ITOS(total_food)
    loop
        exitwhen index >= soldier_count
        if UnitRequire(GetUnitRequireIndex(soldiers[index])) then
            set weight = weight + soldier_weight[index]
        endif
        set index = index + 1
    endloop
    //set s = s + "  " + ITOS(weight)
    set index = 0
    loop
        exitwhen index >= soldier_count
        if UnitRequire(GetUnitRequireIndex(soldiers[index])) then
            call BuildUnits(soldiers[index], total_food * soldier_weight[index] / weight / GetFoodUsed(soldiers[index]))
            //set s = s + "#" + ITOS(total_food * soldier_weight[index] / weight / GetFoodUsed(soldiers[index]))
        endif
        set index = index + 1
    endloop
    //call SetPlayerName(ai_player, s)
endfunction
function UpgradeTower takes nothing returns nothing
    local integer count = 0
    local integer all = GetUnitCountDone(buildid_food) + GetUnitCountDone('uzg1') + GetUnitCountDone('uzg2')
    if BuildRequire(GetBuildRequireIndex('uzg1')) then
        set count = count + 1
    endif
    if BuildRequire(GetBuildRequireIndex('uzg2')) then
        set count = count + 1
    endif

    if BuildRequire(GetBuildRequireIndex('uzg1')) then
        call BuildBuilds('uzg1', all / count)
    endif
    if BuildRequire(GetBuildRequireIndex('uzg2')) then
        call BuildBuilds('uzg2', all / count)
    endif
endfunction
function BuildPriorities takes nothing returns nothing
    local integer base1_count = GetUnitCount(buildid_base_1)
    local integer base2_count = GetUnitCount(buildid_base_2)
    local integer base3_count = GetUnitCount(buildid_base_3)
    local integer base_count = base1_count + base2_count + base3_count
    local integer tower_coefficient = Min((GetGold() - 3000) / 1500, (GetWood() - 3000) / 1500)
    local integer total_food = TotalFoodProduced()
    //大本
    if base_count == 0 and UnitCostRequire(buildid_base_1) and BuildRequire(GetBuildRequireIndex(buildid_base_1)) then
    	call SetBuildAll(BUILD_UNIT, 1, buildid_base_1, - 1)
    endif
    //人口
    if TotalFoodProduced() - FoodUsed() < 12 and TotalFoodProduced() < 100 then
        call BuildBuilds(buildid_food, GetUnitCountDone(buildid_food) + GetUnitCountDone('uzg1') + GetUnitCountDone('uzg2') + 1)
    endif
    //工人
    call BuildUnits(unit_worker, GetUnitCountDone(unit_worker) + Min(lack_gold_workers, base_count))
    set total_food = total_food - GetFoodUsed(unit_worker) * GetUnitCount(unit_worker)
    //英雄
    if UnitRequire(GetUnitRequireIndex(hero_id)) then
        call SetBuildAll(BUILD_UNIT, 1, hero_id, - 1)
        set total_food = total_food - GetFoodUsed(hero_id)
    endif
    if UnitRequire(GetUnitRequireIndex(hero_id2)) then
        call SetBuildAll(BUILD_UNIT, 1, hero_id2, - 1)
        set total_food = total_food - GetFoodUsed(hero_id2)
    endif
    if UnitRequire(GetUnitRequireIndex(hero_id3)) then
        call SetBuildAll(BUILD_UNIT, 1, hero_id3, - 1)
        set total_food = total_food - GetFoodUsed(hero_id3)
    endif
    //兵
    call BuildSoldiers(total_food)
    //祭坛
    call BuildBuilds(buildid_altar, Min(3, base_count))
    //兵营
    call BuildBuilds(buildid_barrack, Min(base_count + 1, 6))
    //二本三本
    if base2_count + base3_count == 0 or GetUnitCountDone(buildid_base_1) > 1 then
        call BuildBuilds(buildid_base_2, GetUnitCountDone(buildid_base_2) + base3_count + 1)
    endif
    if base3_count == 0 or GetUnitCountDone(buildid_base_2) > 1 then
        call BuildBuilds(buildid_base_3, GetUnitCountDone(buildid_base_3) + 1)
    endif
    //科技建筑
    call BuildBuilds('ugrv', 1)
    //商店
    call BuildBuilds(buildid_store, base_count)
    //科技
    call Upgrade()
    //扩张
    if GetMinesOwned() < 2 or ExpansionNeeded() then
    	call BuildExpansion('ugol', 'ugol')
    endif
    //其他
    if GetUnitCount(buildid_food) < base_count * 4 * tower_coefficient then
        call BuildBuilds(buildid_food, GetUnitCountDone(buildid_food) + GetUnitCountDone('uzg1') + GetUnitCountDone('uzg2') + 1)
    endif
    call UpgradeTower()
endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================
function WorkerAssignment takes nothing returns nothing
    loop
        set prepare_workers = false
        set lack_gold_workers = 0
        set redundancy_gold_workers = GetUnitCountDone(unit_worker)
        set lack_wood_workers = 0
        set redundancy_wood_workers = GetUnitCountDone(unit_wood_worker)

        // Harvesting
        call ClearHarvestAI()
        call HarvestPriorities()

        // Building
        call InitBuildArray()
        call BuildPriorities()
        set prepare_workers = true

        call Sleep(2)
    endloop
endfunction
//endregion

//region 科技树
//region 工具函数
function AddUnit takes integer id returns nothing
    set units[unit_count] = id
    set unit_count = unit_count + 1
endfunction
function UnitAddBuildRequire takes integer id returns nothing
    local integer idx = unit_count - 1
    local integer cnt = unit_require_build_count[idx]
    set unit_require_builds[idx * 10 + cnt] = id
    set unit_require_build_count[idx] = cnt + 1
endfunction
function UnitAddUpgradeRequire takes integer id, integer level returns nothing
    local integer idx = unit_count - 1
    local integer cnt = unit_require_upgrade_count[idx]
    set unit_require_upgrades[idx * 10 + cnt] = id
    set unit_require_upgrades_level[idx * 10 + cnt] = level
    set unit_require_upgrade_count[idx] = cnt + 1
endfunction
function UnitAddDependency takes integer id returns nothing
    local integer idx = unit_count - 1
    local integer cnt = unit_dependency_count[idx]
    set unit_dependencys[idx * 10 + cnt] = id
    set unit_dependency_count[idx] = cnt + 1
endfunction

function AddBuild takes integer id returns nothing
    set builds[build_count] = id
    set build_count = build_count + 1
endfunction
function BuildAddBuildRequire takes integer id returns nothing
    local integer idx = build_count - 1
    local integer cnt = build_require_build_count[idx]
    set build_require_builds[idx * 10 + cnt] = id
    set build_require_build_count[idx] = cnt + 1
endfunction
function BuildAddUpgradeRequire takes integer id, integer level returns nothing
    local integer idx = build_count - 1
    local integer cnt = build_require_upgrade_count[idx]
    set build_require_upgrades[idx * 10 + cnt] = id
    set build_require_upgrades_level[idx * 10 + cnt] = level
    set build_require_upgrade_count[idx] = cnt + 1
endfunction
function BuildAddDependency takes integer id returns nothing
    local integer idx = build_count - 1
    local integer cnt = build_dependency_count[idx]
    set build_dependencys[idx * 10 + cnt] = id
    set build_dependency_count[idx] = cnt + 1
endfunction

function AddUpgrade takes integer id, integer level returns nothing
    set upgrades[upgrade_count] = id
    set upgrades_level[upgrade_count] = level
    set upgrade_count = upgrade_count + 1
endfunction
function UpgradeAddBuildRequire takes integer id returns nothing
    local integer idx = upgrade_count - 1
    local integer cnt = upgrade_require_build_count[idx]
    set upgrade_require_builds[idx * 10 + cnt] = id
    set upgrade_require_build_count[idx] = cnt + 1
endfunction
function UpgradeAddUpgradeRequire takes integer id, integer level returns nothing
    local integer idx = upgrade_count - 1
    local integer cnt = upgrade_require_upgrade_count[idx]
    set upgrade_require_upgrades[idx * 10 + cnt] = id
    set upgrade_require_upgrades_level[idx * 10 + cnt] = level
    set upgrade_require_upgrade_count[idx] = cnt + 1
endfunction
//endregion

function InitTechnologyTree takes nothing returns nothing
    call AddUnit(hero_id)
    call UnitAddBuildRequire(buildid_altar)
    call AddUnit(hero_id2)
    call UnitAddBuildRequire(buildid_altar)
    call UnitAddBuildRequire(buildid_base_2)
    call AddUnit(hero_id3)
    call UnitAddBuildRequire(buildid_altar)
    call UnitAddBuildRequire(buildid_base_3)

    call AddUnit(unit_worker)
    call UnitAddBuildRequire(buildid_base_1)
    
    call AddUnit(soldiers[0])
    call UnitAddBuildRequire(buildid_barrack)
    
    call AddUnit(soldiers[1])
    call UnitAddBuildRequire(buildid_barrack)
    call UnitAddBuildRequire('ugrv')
    
    call AddUnit(soldiers[2])
    call UnitAddBuildRequire(buildid_barrack)
    call UnitAddBuildRequire(buildid_base_3)
    
    call AddUnit(soldiers[3])
    call UnitAddBuildRequire(buildid_barrack)
    
    call AddBuild(buildid_base_1)
    call BuildAddDependency(buildid_base_2)
    call BuildAddDependency(buildid_base_3)
    
    call AddBuild(buildid_base_2)
    call BuildAddBuildRequire(buildid_base_1)
    call BuildAddDependency(buildid_base_3)
    
    call AddBuild(buildid_base_3)
    call BuildAddBuildRequire(buildid_base_2)
    call BuildAddBuildRequire(buildid_altar)
    
    call AddBuild(buildid_barrack)
    
    call AddBuild(buildid_altar)
    
    call AddBuild(buildid_food)
    call BuildAddDependency('uzg1')
    call BuildAddDependency('uzg2')
    
    call AddBuild(buildid_store)
    
    call AddBuild('ugrv') //坟场
    
    call AddBuild('uzg1') //幽魂之塔
    call BuildAddBuildRequire('ugrv')
    call BuildAddBuildRequire(buildid_food)
    call AddBuild('uzg2') //蛛网怪塔
    call BuildAddBuildRequire(buildid_food)
    
    call AddUpgrade('Rupm', 1) //背包
    call UpgradeAddBuildRequire(buildid_store)
    call UpgradeAddBuildRequire(buildid_base_1)
    call AddUpgrade('Ruac', 1) //吞食尸体
    call UpgradeAddBuildRequire(buildid_barrack)
    call AddUpgrade('Ruex', 1) //挖掘尸体
    call UpgradeAddBuildRequire(buildid_barrack)
    call UpgradeAddBuildRequire(buildid_base_3)
    call AddUpgrade('Rupc', 1) //疾病云雾
    call UpgradeAddBuildRequire(buildid_barrack)
    call UpgradeAddBuildRequire(buildid_base_3)
    call AddUpgrade('Ruwb', 1) //蛛网
    call UpgradeAddBuildRequire(buildid_barrack)
    call UpgradeAddBuildRequire(buildid_base_2)
    call UpgradeAddBuildRequire('ugrv')
    call AddUpgrade('Rubu', 1) //钻地
    call UpgradeAddBuildRequire(buildid_barrack)
    call UpgradeAddBuildRequire(buildid_base_2)
    call UpgradeAddBuildRequire('ugrv')
    call AddUpgrade('Rugf', 1) //食尸鬼狂热
    call UpgradeAddBuildRequire(buildid_barrack)
    call UpgradeAddBuildRequire(buildid_base_3)
    call UpgradeAddBuildRequire('ugrv')

    call AddUpgrade('Rura', 1) //生物攻击
    call UpgradeAddBuildRequire('ugrv')
    call AddUpgrade('Rura', 2) //生物攻击
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_2)
    call AddUpgrade('Rura', 3) //生物攻击
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_3)
    call AddUpgrade('Rucr', 1) //生物甲壳
    call UpgradeAddBuildRequire('ugrv')
    call AddUpgrade('Rucr', 2) //生物甲壳
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_2)
    call AddUpgrade('Rucr', 3) //生物甲壳
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_3)
    call AddUpgrade('Rume', 1) //邪恶力量
    call UpgradeAddBuildRequire('ugrv')
    call AddUpgrade('Rume', 2) //邪恶力量
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_2)
    call AddUpgrade('Rume', 3) //邪恶力量
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_3)
    call AddUpgrade('Ruar', 1) //邪恶装甲
    call UpgradeAddBuildRequire('ugrv')
    call AddUpgrade('Ruar', 2) //邪恶装甲
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_2)
    call AddUpgrade('Ruar', 3) //邪恶装甲
    call UpgradeAddBuildRequire('ugrv')
    call UpgradeAddBuildRequire(buildid_base_3)
endfunction
//endregion

//region 部队
function AddSoldier takes integer id, integer weight returns nothing
    set soldiers[soldier_count] = id
    set soldier_weight[soldier_count] = weight
    set soldier_count = soldier_count + 1
endfunction

function InitSoldiers takes nothing returns nothing
    call AddSoldier('ugho', 3) //小狗
    call AddSoldier('ucry', 3) //蜘蛛
    call AddSoldier('uabo', 3) //胖子
    call AddSoldier('umtw', 2) //车子
endfunction
//endregion

//region 英雄
//===========================================================================
// Stores hero ID and skills
//===========================================================================
function SetHeroSkill_1 takes integer s1, integer s2, integer s3, integer s4 returns nothing
	set skills1[1] = s1
	set skills1[3] = s1
	set skills1[5] = s1
            
	set skills1[2] = s3
	set skills1[4] = s3
	set skills1[7] = s3
            
	set skills1[8] = s2
	set skills1[9] = s2
	set skills1[10] = s2
            
	set skills1[6] = s4
endfunction 
function SetHeroSkill_2 takes integer s1, integer s2, integer s3, integer s4 returns nothing
	set skills2[1] = s1
	set skills2[3] = s1
	set skills2[5] = s1
            
	set skills2[2] = s3
	set skills2[4] = s3
	set skills2[7] = s3
            
	set skills2[8] = s2
	set skills2[9] = s2
	set skills2[10] = s2
            
	set skills2[6] = s4
endfunction 
function SetHeroSkill_3 takes integer s1, integer s2, integer s3, integer s4 returns nothing
	set skills3[1] = s1
	set skills3[3] = s1
	set skills3[5] = s1
            
	set skills3[2] = s3
	set skills3[4] = s3
	set skills3[7] = s3
            
	set skills3[8] = s2
	set skills3[9] = s2
	set skills3[10] = s2
            
	set skills3[6] = s4
endfunction 

function SetHero takes integer order, integer index returns nothing
    if order == 1 then
        set hero_id = hero_ids[index]
        call SetHeroSkill_1(hero_skill_ids[index * 10 + 0], hero_skill_ids[index * 10 + 1], hero_skill_ids[index * 10 + 2], hero_skill_ids[index * 10 + 3])
    elseif order == 2 then
        set hero_id2 = hero_ids[index]
        call SetHeroSkill_2(hero_skill_ids[index * 10 + 0], hero_skill_ids[index * 10 + 1], hero_skill_ids[index * 10 + 2], hero_skill_ids[index * 10 + 3])
    elseif order == 3 then
        set hero_id3 = hero_ids[index]
        call SetHeroSkill_3(hero_skill_ids[index * 10 + 0], hero_skill_ids[index * 10 + 1], hero_skill_ids[index * 10 + 2], hero_skill_ids[index * 10 + 3])
    endif
endfunction

function SelectHeroes takes nothing returns nothing
    local integer array indices
    local integer max = hero_count
    local integer cnt = 3 //选择的英雄数
    local integer idx = 0
    loop
    exitwhen idx >= max
        set indices[idx] = idx
    set idx = idx + 1
    endloop
    loop
    set max = max - 1
    exitwhen cnt == 0
        set idx = GetRandomInt(0, max)
        call SetHero(cnt, indices[idx])
        set indices[idx] = indices[max]
    set cnt = cnt - 1
    endloop
endfunction

function RegisterHero takes integer heroId, integer skill1, integer skill2, integer skill3, integer skill4 returns nothing
    local integer array indices
    local integer randomSkills = 3
    local integer idx = 0
    local integer temp
    loop
    exitwhen idx >= randomSkills
    set indices[idx] = idx
    set idx = idx + 1
    endloop
    loop
    set randomSkills = randomSkills - 1
    set idx = GetRandomInt(0, randomSkills)
    set temp = indices[randomSkills]
    set indices[randomSkills] = indices[idx]
    set indices[idx] = temp
    exitwhen randomSkills == 0
    endloop

    set hero_ids[hero_count] = heroId
    set hero_skill_ids[hero_count * 10 + indices[0]] = skill1
    set hero_skill_ids[hero_count * 10 + indices[1]] = skill2
    set hero_skill_ids[hero_count * 10 + indices[2]] = skill3
    set hero_skill_ids[hero_count * 10 + 3] = skill4
    set hero_count = hero_count + 1
endfunction

function InitHeros takes nothing returns nothing
    call RegisterHero('Udea', 'AUdc', 'AUdp', 'AUau', 'AUan') //死骑
    call RegisterHero('Ulic', 'AUfn', 'AUfu', 'AUdr', 'AUdd') //巫妖
    call RegisterHero('Udre', 'AUav', 'AUsl', 'AUcs', 'AUin') //恐惧魔王
    call RegisterHero('Ucrl', 'AUim', 'AUts', 'AUcb', 'AUls') //小强
    call SelectHeroes()
endfunction

//===========================================================================
// Returns the hero skill for the given hero and level
//===========================================================================
function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()

    if(level > max_hero_level) then
        set max_hero_level = level
    endif
	if(curHero == hero_id) then
        return skills1[level]
    elseif(curHero == hero_id2) then
        return skills2[level]
    elseif(curHero == hero_id3) then
        return skills3[level]
    endif
    return 0
endfunction
//endregion

function InitOptions takes nothing returns nothing
    call SetMeleeAI(  )
    call SetDefendPlayer(false)
    call SetRandomPaths(true)
    call SetTargetHeroes(true)
    call SetPeonsRepair(true)
    call SetHeroesFlee(true)
    call SetHeroesBuyItems(true)
    call SetUnitsFlee(false)
    call SetGroupsFlee(false)
    call SetWatchMegaTargets(true)
    call SetIgnoreInjured(false)
    call SetHeroesTakeItems(true)
    call SetSlowChopping(false)
    call SetCaptainChanges(true)
    call SetSmartArtillery(true)
endfunction

//region 玩家名
function RUE takes nothing returns string
    local string array EL 
    set EL[0] ="A"
    set EL[1] ="B"
    set EL[2] ="C"
    set EL[3] ="D"
    set EL[4] ="E"
    set EL[5] ="F"
    set EL[6] ="G"
    set EL[7] ="H"
    set EL[8] ="I"
    set EL[9] ="J"
    set EL[10] ="K"
    set EL[11] ="L"
    set EL[12] ="M"
    set EL[13] ="N"
    set EL[14] ="O"
    set EL[15] ="P"
    set EL[16] ="Q"
    set EL[17] ="R"
    set EL[18] ="S"
    set EL[19] ="T"
    set EL[20] ="U"
    set EL[21] ="V"
    set EL[22] ="W"
    set EL[23] ="X"
    set EL[24] ="Y"
    set EL[25] ="Z"
    return EL[GetRandomInt(0, 25)] 
endfunction
function RLE takes nothing returns string
    local string array EL 
    set EL[0] ="a"
    set EL[1] ="b"
    set EL[2] ="c"
    set EL[3] ="d"
    set EL[4] ="e"
    set EL[5] ="f"
    set EL[6] ="g"
    set EL[7] ="h"
    set EL[8] ="i"
    set EL[9] ="j"
    set EL[10] ="k"
    set EL[11] ="l"
    set EL[12] ="m"
    set EL[13] ="n"
    set EL[14] ="o"
    set EL[15] ="p"
    set EL[16] ="q"
    set EL[17] ="r"
    set EL[18] ="s"
    set EL[19] ="t"
    set EL[20] ="u"
    set EL[21] ="v"
    set EL[22] ="w"
    set EL[23] ="x"
    set EL[24] ="y"
    set EL[25] ="z"
    return EL[GetRandomInt(0, 25)] 
endfunction
function RE takes nothing returns string
    if(GetRandomInt(0, 1) < 1)then 
        return RLE()
    endif
    return RUE()
endfunction 
function GetRandomString takes integer ll, integer hl returns string
    local integer sl = GetRandomInt(ll, hl)
    local string str =""
    loop
    set sl = sl - 1
    exitwhen sl <= 0
    set str = str + RE()
    endloop
    if(GetRandomInt(0, 3) < 1)then
	    set str = str +" - "
	    set sl = GetRandomInt(2, 5)
	    loop
	    set sl = sl - 1
	    exitwhen sl <= 0
	    set str = str + RUE()
	    endloop
    endif
    return str
endfunction
//endregion
function main takes nothing returns nothing
    call InitAI()
    call SetPlayerName(ai_player, GetRandomString(3, 7))
    call InitOptions()
    call InitHeros()
    call CreateCaptains()
    call SetHeroLevels(function ChooseHeroSkill)

    call Sleep(0.1)
    call InitSoldiers()
    call InitTechnologyTree()
    call Sleep(GetRandomReal(0.1, 0.2))
    call StartThread(function WorkerAssignment)
    call Sleep(GetRandomReal(0.1, 0.2))
    call StartThread(function AttackAssignment)
    call PlayGame()
endfunction
